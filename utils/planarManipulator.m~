classdef planarManipulator
    %PLANARMANIPULATOR Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        d
        a
        alpha
        dim
        dof
        limits
        l
    end
    
    methods
        function obj = planarManipulator(link_lengths, limits)
        %PLANARMANIPULATOR Construct an instance of this class
        %   Generates a planar NR manipulator based on dh params
            

            obj.dim = 2;
            obj.dof = length(link_lengths);
            obj.limits = limits;

            obj.d = 0.*zeros(obj.dof,1);
            obj.a = link_lengths;
            obj.alpha = 0.*ones(obj.dof,1); 
            obj.l = link_lengths;
        end
        
        function p = forwardKinematics(obj, theta, link_n)
        %FORWARDKINEMATICS Calculate FK of given link
        %   Detailed explanation goes here
            T = eye(4);
            for idx = 1:link_n
                T = T*DH(obj.d(idx), obj.a(idx), obj.alpha(idx), theta(idx));
            end
            
            p = [T(1,4); T(2,4)];            
            
        end
        
        function [P] = FKLinkPositions(obj,theta)
            a = obj.a;
            P = [];
            for idx = 1:length(theta)
                %P = [P, obj.forwardKinematics(theta, idx)];
                P = [P, forwardKinematicsHelper(theta(1:idx),a(1:idx))];
            end
        end
        
        function theta = IKLinkPositions(obj,P)
            a = obj.a;
            P = [[0,0]', P];
            
            R = eye(2);
            theta = [];
            
            for idx = 1 : length(a)
                p1 = P(:,idx);
                p2 = P(:,idx+1);
                l = norm(p2-p1);%a(idx);
                
                A = l.*R;
                B = p2 - p1;
                
                X = linsolve(A,B);
                
                theta_idx = atan2(X(2), X(1)); 
                
                theta = [theta, theta_idx];
                
                Rz = [cos(theta_idx) -sin(theta_idx);
                      sin(theta_idx) cos(theta_idx)];
                
                R = R*Rz;
            end
           
        end
        
        function [D, Cm, Cn, A] = distanceMatrix(obj)
        % DISTANCEMATRIX returns an incomplete distance matrix describing
        % manipulator structure.
        % D = [Cm, A; A', Cn];
            
            D = diag(obj.a', 1) + diag(obj.a', 1)';
        
            
            Cm = D;
            Cn = [];
            A = [];
        end 
    
    end
end

